// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tabs <template> matches previous snapshot 1`] = `
VueWrapper {
  "_emitted": Object {},
  "_emittedByOrder": Array [],
  "element": <div
    data-tipe-ui="TipeTabs"
    style="height: 100%; width: 100%;"
  >
    <div
      data-tipe-ui="TipeTabsMenu"
    />
  </div>,
  "isFunctionalComponent": undefined,
  "isVueComponent": true,
  "options": Object {
    "attachedToDocument": false,
    "sync": true,
  },
  "version": 2.5,
  "vm": VueComponent {
    "$attrs": Object {},
    "$children": Array [
      VueComponent {
        "$attrs": Object {},
        "$children": Array [],
        "$createElement": [Function],
        "$el": <div
          data-tipe-ui="TipeTabsMenu"
        />,
        "$emit": [Function],
        "$listeners": Object {
          "click": [Function],
        },
        "$options": Object {
          "_componentTag": undefined,
          "_parentElm": null,
          "_parentListeners": Object {
            "click": [Function],
          },
          "_parentVnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": [Circular],
            "componentOptions": Object {
              "Ctor": [Function],
              "children": undefined,
              "listeners": Object {
                "click": [Function],
              },
              "propsData": Object {
                "buttons": Array [],
              },
              "tag": undefined,
            },
            "context": [Circular],
            "data": Object {
              "hook": Object {
                "destroy": [Function],
                "init": [Function],
                "insert": [Function],
                "prepatch": [Function],
              },
              "on": undefined,
              "pendingInsert": null,
              "props": Object {
                "buttons": Array [],
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "vue-component-5-TipeTabsMenu",
            "text": undefined,
          },
          "_propKeys": Array [
            "buttons",
          ],
          "_refElm": null,
          "_renderChildren": undefined,
          "parent": [Circular],
          "propsData": Object {
            "buttons": Array [],
          },
        },
        "$parent": [Circular],
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$vnode": VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": [Circular],
          "componentOptions": Object {
            "Ctor": [Function],
            "children": undefined,
            "listeners": Object {
              "click": [Function],
            },
            "propsData": Object {
              "buttons": Array [],
            },
            "tag": undefined,
          },
          "context": [Circular],
          "data": Object {
            "hook": Object {
              "destroy": [Function],
              "init": [Function],
              "insert": [Function],
              "prepatch": [Function],
            },
            "on": undefined,
            "pendingInsert": null,
            "props": Object {
              "buttons": Array [],
            },
          },
          "elm": <div
            data-tipe-ui="TipeTabsMenu"
          />,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": false,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": "vue-component-5-TipeTabsMenu",
          "text": undefined,
        },
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_data": Object {},
        "_directInactive": false,
        "_events": Object {
          "click": Array [
            [Function],
          ],
        },
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_props": Object {
          "buttons": Array [],
        },
        "_renderProxy": VueComponent {
          "$attrs": Object {},
          "$children": Array [],
          "$createElement": [Function],
          "$el": <div
            data-tipe-ui="TipeTabsMenu"
          />,
          "$emit": [Function],
          "$listeners": Object {
            "click": [Function],
          },
          "$options": Object {
            "_componentTag": undefined,
            "_parentElm": null,
            "_parentListeners": Object {
              "click": [Function],
            },
            "_parentVnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "_propKeys": Array [
              "buttons",
            ],
            "_refElm": null,
            "_renderChildren": undefined,
            "parent": [Circular],
            "propsData": Object {
              "buttons": Array [],
            },
          },
          "$parent": [Circular],
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": [Circular],
            "componentOptions": Object {
              "Ctor": [Function],
              "children": undefined,
              "listeners": Object {
                "click": [Function],
              },
              "propsData": Object {
                "buttons": Array [],
              },
              "tag": undefined,
            },
            "context": [Circular],
            "data": Object {
              "hook": Object {
                "destroy": [Function],
                "init": [Function],
                "insert": [Function],
                "prepatch": [Function],
              },
              "on": undefined,
              "pendingInsert": null,
              "props": Object {
                "buttons": Array [],
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "vue-component-5-TipeTabsMenu",
            "text": undefined,
          },
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {
            "click": Array [
              [Function],
            ],
          },
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_props": Object {
            "buttons": Array [],
          },
          "_renderProxy": [Circular],
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 1,
          "_vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": Array [],
            "componentInstance": undefined,
            "componentOptions": undefined,
            "context": [Circular],
            "data": Object {
              "attrs": Object {
                "data-tipe-ui": "TipeTabsMenu",
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": true,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "raw": false,
            "tag": "div",
            "text": undefined,
          },
          "_watcher": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              6,
            },
            "deps": Array [
              Dep {
                "_sortedId": 0,
                "id": 6,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 7,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
        },
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 1,
        "_vnode": VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": Array [],
          "componentInstance": undefined,
          "componentOptions": undefined,
          "context": [Circular],
          "data": Object {
            "attrs": Object {
              "data-tipe-ui": "TipeTabsMenu",
            },
          },
          "elm": <div
            data-tipe-ui="TipeTabsMenu"
          />,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": true,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": [Circular],
            "componentOptions": Object {
              "Ctor": [Function],
              "children": undefined,
              "listeners": Object {
                "click": [Function],
              },
              "propsData": Object {
                "buttons": Array [],
              },
              "tag": undefined,
            },
            "context": [Circular],
            "data": Object {
              "hook": Object {
                "destroy": [Function],
                "init": [Function],
                "insert": [Function],
                "prepatch": [Function],
              },
              "on": undefined,
              "pendingInsert": null,
              "props": Object {
                "buttons": Array [],
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "vue-component-5-TipeTabsMenu",
            "text": undefined,
          },
          "raw": false,
          "tag": "div",
          "text": undefined,
        },
        "_watcher": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {
            6,
          },
          "deps": Array [
            Dep {
              "_sortedId": 0,
              "id": 6,
              "subs": Array [
                [Circular],
              ],
            },
          ],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 7,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              6,
            },
            "deps": Array [
              Dep {
                "_sortedId": 0,
                "id": 6,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 7,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
      },
    ],
    "$createElement": [Function],
    "$el": <div
      data-tipe-ui="TipeTabs"
      style="height: 100%; width: 100%;"
    >
      <div
        data-tipe-ui="TipeTabsMenu"
      />
    </div>,
    "$emit": [Function],
    "$listeners": Object {},
    "$options": Object {
      "_Ctor": Object {
        "1": [Function],
      },
      "_base": [Function],
      "_parentElm": null,
      "_refElm": null,
      "beforeCreate": Array [
        [Function],
      ],
      "components": Object {
        "TipeTabsMenu": Object {
          "attrs": undefined,
          "class": undefined,
          "domProps": undefined,
          "functional": undefined,
          "key": undefined,
          "name": "TipeTabsMenu",
          "nativeOn": undefined,
          "normalizedStyle": undefined,
          "on": undefined,
          "props": Object {
            "buttons": Object {
              "type": [Function],
              "validator": [Function],
            },
          },
          "ref": undefined,
          "render": [Function],
          "staticClass": undefined,
          "staticStyle": undefined,
          "style": undefined,
        },
        "transition": Object {
          "_Ctor": Object {
            "1": [Function],
          },
          "name": "transition",
          "render": [Function],
        },
        "transition-group": Object {
          "_Ctor": Object {
            "1": [Function],
          },
          "name": "transition-group",
          "render": [Function],
        },
      },
      "computed": Object {
        "activePanelLabel": [Function],
        "buttons": [Function],
        "panel": [Function],
        "panelVNodes": [Function],
        "panels": [Function],
      },
      "data": [Function],
      "directives": Object {},
      "filters": Object {},
      "logModifiedComponents": true,
      "methods": Object {
        "onClickMenuButton": [Function],
      },
      "name": "TipeTabs",
      "provide": [Function],
      "render": [Function],
    },
    "$parent": undefined,
    "$refs": Object {},
    "$root": [Circular],
    "$scopedSlots": Object {},
    "$slots": Object {},
    "$vnode": undefined,
    "__emitted": Object {},
    "__emittedByOrder": Array [],
    "_c": [Function],
    "_computedWatchers": Object {
      "activePanelLabel": Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": true,
        "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
        "getter": [Function],
        "id": 3,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "buttons": Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
        "getter": [Function],
        "id": 4,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": Array [],
        "vm": [Circular],
      },
      "panel": Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
        "getter": [Function],
        "id": 5,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "panelVNodes": Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
        "getter": [Function],
        "id": 1,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": Array [],
        "vm": [Circular],
      },
      "panels": Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
        "getter": [Function],
        "id": 2,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": Array [],
        "vm": [Circular],
      },
    },
    "_data": Object {
      "internalActivePanelLabel": null,
    },
    "_directInactive": false,
    "_events": Object {},
    "_hasHookEvent": false,
    "_inactive": null,
    "_isBeingDestroyed": false,
    "_isDestroyed": false,
    "_isMounted": true,
    "_isVue": true,
    "_provided": undefined,
    "_renderProxy": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        VueComponent {
          "$attrs": Object {},
          "$children": Array [],
          "$createElement": [Function],
          "$el": <div
            data-tipe-ui="TipeTabsMenu"
          />,
          "$emit": [Function],
          "$listeners": Object {
            "click": [Function],
          },
          "$options": Object {
            "_componentTag": undefined,
            "_parentElm": null,
            "_parentListeners": Object {
              "click": [Function],
            },
            "_parentVnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "_propKeys": Array [
              "buttons",
            ],
            "_refElm": null,
            "_renderChildren": undefined,
            "parent": [Circular],
            "propsData": Object {
              "buttons": Array [],
            },
          },
          "$parent": [Circular],
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": [Circular],
            "componentOptions": Object {
              "Ctor": [Function],
              "children": undefined,
              "listeners": Object {
                "click": [Function],
              },
              "propsData": Object {
                "buttons": Array [],
              },
              "tag": undefined,
            },
            "context": [Circular],
            "data": Object {
              "hook": Object {
                "destroy": [Function],
                "init": [Function],
                "insert": [Function],
                "prepatch": [Function],
              },
              "on": undefined,
              "pendingInsert": null,
              "props": Object {
                "buttons": Array [],
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "vue-component-5-TipeTabsMenu",
            "text": undefined,
          },
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {
            "click": Array [
              [Function],
            ],
          },
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_props": Object {
            "buttons": Array [],
          },
          "_renderProxy": VueComponent {
            "$attrs": Object {},
            "$children": Array [],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "$emit": [Function],
            "$listeners": Object {
              "click": [Function],
            },
            "$options": Object {
              "_componentTag": undefined,
              "_parentElm": null,
              "_parentListeners": Object {
                "click": [Function],
              },
              "_parentVnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": [Circular],
                "componentOptions": Object {
                  "Ctor": [Function],
                  "children": undefined,
                  "listeners": Object {
                    "click": [Function],
                  },
                  "propsData": Object {
                    "buttons": Array [],
                  },
                  "tag": undefined,
                },
                "context": [Circular],
                "data": Object {
                  "hook": Object {
                    "destroy": [Function],
                    "init": [Function],
                    "insert": [Function],
                    "prepatch": [Function],
                  },
                  "on": undefined,
                  "pendingInsert": null,
                  "props": Object {
                    "buttons": Array [],
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": "vue-component-5-TipeTabsMenu",
                "text": undefined,
              },
              "_propKeys": Array [
                "buttons",
              ],
              "_refElm": null,
              "_renderChildren": undefined,
              "parent": [Circular],
              "propsData": Object {
                "buttons": Array [],
              },
            },
            "$parent": [Circular],
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_data": Object {},
            "_directInactive": false,
            "_events": Object {
              "click": Array [
                [Function],
              ],
            },
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_props": Object {
              "buttons": Array [],
            },
            "_renderProxy": [Circular],
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 1,
            "_vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": Array [],
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": [Circular],
              "data": Object {
                "attrs": Object {
                  "data-tipe-ui": "TipeTabsMenu",
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": true,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": [Circular],
                "componentOptions": Object {
                  "Ctor": [Function],
                  "children": undefined,
                  "listeners": Object {
                    "click": [Function],
                  },
                  "propsData": Object {
                    "buttons": Array [],
                  },
                  "tag": undefined,
                },
                "context": [Circular],
                "data": Object {
                  "hook": Object {
                    "destroy": [Function],
                    "init": [Function],
                    "insert": [Function],
                    "prepatch": [Function],
                  },
                  "on": undefined,
                  "pendingInsert": null,
                  "props": Object {
                    "buttons": Array [],
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": "vue-component-5-TipeTabsMenu",
                "text": undefined,
              },
              "raw": false,
              "tag": "div",
              "text": undefined,
            },
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
          },
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 1,
          "_vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": Array [],
            "componentInstance": undefined,
            "componentOptions": undefined,
            "context": [Circular],
            "data": Object {
              "attrs": Object {
                "data-tipe-ui": "TipeTabsMenu",
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": true,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "raw": false,
            "tag": "div",
            "text": undefined,
          },
          "_watcher": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              6,
            },
            "deps": Array [
              Dep {
                "_sortedId": 0,
                "id": 6,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 7,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
        },
      ],
      "$createElement": [Function],
      "$el": <div
        data-tipe-ui="TipeTabs"
        style="height: 100%; width: 100%;"
      >
        <div
          data-tipe-ui="TipeTabsMenu"
        />
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "_Ctor": Object {
          "1": [Function],
        },
        "_base": [Function],
        "_parentElm": null,
        "_refElm": null,
        "beforeCreate": Array [
          [Function],
        ],
        "components": Object {
          "TipeTabsMenu": Object {
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "name": "TipeTabsMenu",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "buttons": Object {
                "type": [Function],
                "validator": [Function],
              },
            },
            "ref": undefined,
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition": Object {
            "_Ctor": Object {
              "1": [Function],
            },
            "name": "transition",
            "render": [Function],
          },
          "transition-group": Object {
            "_Ctor": Object {
              "1": [Function],
            },
            "name": "transition-group",
            "render": [Function],
          },
        },
        "computed": Object {
          "activePanelLabel": [Function],
          "buttons": [Function],
          "panel": [Function],
          "panelVNodes": [Function],
          "panels": [Function],
        },
        "data": [Function],
        "directives": Object {},
        "filters": Object {},
        "logModifiedComponents": true,
        "methods": Object {
          "onClickMenuButton": [Function],
        },
        "name": "TipeTabs",
        "provide": [Function],
        "render": [Function],
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "activePanelLabel": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": true,
          "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
          "getter": [Function],
          "id": 3,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "buttons": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
          "getter": [Function],
          "id": 4,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        "panel": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
          "getter": [Function],
          "id": 5,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "panelVNodes": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
          "getter": [Function],
          "id": 1,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        "panels": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
          "getter": [Function],
          "id": 2,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
      },
      "_data": Object {
        "internalActivePanelLabel": null,
      },
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": undefined,
      "_renderProxy": [Circular],
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 0,
      "_vnode": VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": Array [
          VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": VueComponent {
              "$attrs": Object {},
              "$children": Array [],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "$emit": [Function],
              "$listeners": Object {
                "click": [Function],
              },
              "$options": Object {
                "_componentTag": undefined,
                "_parentElm": null,
                "_parentListeners": Object {
                  "click": [Function],
                },
                "_parentVnode": [Circular],
                "_propKeys": Array [
                  "buttons",
                ],
                "_refElm": null,
                "_renderChildren": undefined,
                "parent": [Circular],
                "propsData": Object {
                  "buttons": Array [],
                },
              },
              "$parent": [Circular],
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": [Circular],
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_data": Object {},
              "_directInactive": false,
              "_events": Object {
                "click": Array [
                  [Function],
                ],
              },
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_props": Object {
                "buttons": Array [],
              },
              "_renderProxy": VueComponent {
                "$attrs": Object {},
                "$children": Array [],
                "$createElement": [Function],
                "$el": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "$emit": [Function],
                "$listeners": Object {
                  "click": [Function],
                },
                "$options": Object {
                  "_componentTag": undefined,
                  "_parentElm": null,
                  "_parentListeners": Object {
                    "click": [Function],
                  },
                  "_parentVnode": [Circular],
                  "_propKeys": Array [
                    "buttons",
                  ],
                  "_refElm": null,
                  "_renderChildren": undefined,
                  "parent": [Circular],
                  "propsData": Object {
                    "buttons": Array [],
                  },
                },
                "$parent": [Circular],
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$vnode": [Circular],
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_data": Object {},
                "_directInactive": false,
                "_events": Object {
                  "click": Array [
                    [Function],
                  ],
                },
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_props": Object {
                  "buttons": Array [],
                },
                "_renderProxy": [Circular],
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 1,
                "_vnode": VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": Array [],
                  "componentInstance": undefined,
                  "componentOptions": undefined,
                  "context": [Circular],
                  "data": Object {
                    "attrs": Object {
                      "data-tipe-ui": "TipeTabsMenu",
                    },
                  },
                  "elm": <div
                    data-tipe-ui="TipeTabsMenu"
                  />,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": true,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": [Circular],
                  "raw": false,
                  "tag": "div",
                  "text": undefined,
                },
                "_watcher": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {
                    6,
                  },
                  "deps": Array [
                    Dep {
                      "_sortedId": 0,
                      "id": 6,
                      "subs": Array [
                        [Circular],
                      ],
                    },
                  ],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 7,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      6,
                    },
                    "deps": Array [
                      Dep {
                        "_sortedId": 0,
                        "id": 6,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
              },
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 1,
              "_vnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": Array [],
                "componentInstance": undefined,
                "componentOptions": undefined,
                "context": [Circular],
                "data": Object {
                  "attrs": Object {
                    "data-tipe-ui": "TipeTabsMenu",
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": true,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": [Circular],
                "raw": false,
                "tag": "div",
                "text": undefined,
              },
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {
                    6,
                  },
                  "deps": Array [
                    Dep {
                      "_sortedId": 0,
                      "id": 6,
                      "subs": Array [
                        [Circular],
                      ],
                    },
                  ],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 7,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
            },
            "componentOptions": Object {
              "Ctor": [Function],
              "children": undefined,
              "listeners": Object {
                "click": [Function],
              },
              "propsData": Object {
                "buttons": Array [],
              },
              "tag": undefined,
            },
            "context": [Circular],
            "data": Object {
              "hook": Object {
                "destroy": [Function],
                "init": [Function],
                "insert": [Function],
                "prepatch": [Function],
              },
              "on": undefined,
              "pendingInsert": null,
              "props": Object {
                "buttons": Array [],
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "vue-component-5-TipeTabsMenu",
            "text": undefined,
          },
        ],
        "componentInstance": undefined,
        "componentOptions": undefined,
        "context": [Circular],
        "data": Object {
          "attrs": Object {
            "data-tipe-ui": "TipeTabs",
          },
          "normalizedStyle": Object {
            "height": "100%",
            "width": "100%",
          },
          "style": Object {
            "height": "100%",
            "width": "100%",
          },
        },
        "elm": <div
          data-tipe-ui="TipeTabs"
          style="height: 100%; width: 100%;"
        >
          <div
            data-tipe-ui="TipeTabsMenu"
          />
        </div>,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": true,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "div",
        "text": undefined,
      },
      "_watcher": Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 6,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
          "getter": [Function],
          "id": 1,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
          "getter": [Function],
          "id": 2,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": true,
          "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
          "getter": [Function],
          "id": 3,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
          "getter": [Function],
          "id": 4,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
          "getter": [Function],
          "id": 5,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 6,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "internalActivePanelLabel": null,
      "onClickMenuButton": [Function],
    },
    "_self": [Circular],
    "_staticTrees": null,
    "_uid": 0,
    "_vnode": VNode {
      "asyncFactory": undefined,
      "asyncMeta": undefined,
      "children": Array [
        VNode {
          "asyncFactory": undefined,
          "asyncMeta": undefined,
          "children": undefined,
          "componentInstance": VueComponent {
            "$attrs": Object {},
            "$children": Array [],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "$emit": [Function],
            "$listeners": Object {
              "click": [Function],
            },
            "$options": Object {
              "_componentTag": undefined,
              "_parentElm": null,
              "_parentListeners": Object {
                "click": [Function],
              },
              "_parentVnode": [Circular],
              "_propKeys": Array [
                "buttons",
              ],
              "_refElm": null,
              "_renderChildren": undefined,
              "parent": [Circular],
              "propsData": Object {
                "buttons": Array [],
              },
            },
            "$parent": [Circular],
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": [Circular],
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_data": Object {},
            "_directInactive": false,
            "_events": Object {
              "click": Array [
                [Function],
              ],
            },
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_props": Object {
              "buttons": Array [],
            },
            "_renderProxy": VueComponent {
              "$attrs": Object {},
              "$children": Array [],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "$emit": [Function],
              "$listeners": Object {
                "click": [Function],
              },
              "$options": Object {
                "_componentTag": undefined,
                "_parentElm": null,
                "_parentListeners": Object {
                  "click": [Function],
                },
                "_parentVnode": [Circular],
                "_propKeys": Array [
                  "buttons",
                ],
                "_refElm": null,
                "_renderChildren": undefined,
                "parent": [Circular],
                "propsData": Object {
                  "buttons": Array [],
                },
              },
              "$parent": [Circular],
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": [Circular],
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_data": Object {},
              "_directInactive": false,
              "_events": Object {
                "click": Array [
                  [Function],
                ],
              },
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_props": Object {
                "buttons": Array [],
              },
              "_renderProxy": [Circular],
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 1,
              "_vnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": Array [],
                "componentInstance": undefined,
                "componentOptions": undefined,
                "context": [Circular],
                "data": Object {
                  "attrs": Object {
                    "data-tipe-ui": "TipeTabsMenu",
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": true,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": [Circular],
                "raw": false,
                "tag": "div",
                "text": undefined,
              },
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {
                    6,
                  },
                  "deps": Array [
                    Dep {
                      "_sortedId": 0,
                      "id": 6,
                      "subs": Array [
                        [Circular],
                      ],
                    },
                  ],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 7,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
            },
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 1,
            "_vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": Array [],
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": [Circular],
              "data": Object {
                "attrs": Object {
                  "data-tipe-ui": "TipeTabsMenu",
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": true,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": [Circular],
              "raw": false,
              "tag": "div",
              "text": undefined,
            },
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
          },
          "componentOptions": Object {
            "Ctor": [Function],
            "children": undefined,
            "listeners": Object {
              "click": [Function],
            },
            "propsData": Object {
              "buttons": Array [],
            },
            "tag": undefined,
          },
          "context": [Circular],
          "data": Object {
            "hook": Object {
              "destroy": [Function],
              "init": [Function],
              "insert": [Function],
              "prepatch": [Function],
            },
            "on": undefined,
            "pendingInsert": null,
            "props": Object {
              "buttons": Array [],
            },
          },
          "elm": <div
            data-tipe-ui="TipeTabsMenu"
          />,
          "fnContext": undefined,
          "fnOptions": undefined,
          "fnScopeId": undefined,
          "isAsyncPlaceholder": false,
          "isCloned": false,
          "isComment": false,
          "isOnce": false,
          "isRootInsert": false,
          "isStatic": false,
          "key": undefined,
          "ns": undefined,
          "parent": undefined,
          "raw": false,
          "tag": "vue-component-5-TipeTabsMenu",
          "text": undefined,
        },
      ],
      "componentInstance": undefined,
      "componentOptions": undefined,
      "context": [Circular],
      "data": Object {
        "attrs": Object {
          "data-tipe-ui": "TipeTabs",
        },
        "normalizedStyle": Object {
          "height": "100%",
          "width": "100%",
        },
        "style": Object {
          "height": "100%",
          "width": "100%",
        },
      },
      "elm": <div
        data-tipe-ui="TipeTabs"
        style="height: 100%; width: 100%;"
      >
        <div
          data-tipe-ui="TipeTabsMenu"
        />
      </div>,
      "fnContext": undefined,
      "fnOptions": undefined,
      "fnScopeId": undefined,
      "isAsyncPlaceholder": false,
      "isCloned": false,
      "isComment": false,
      "isOnce": false,
      "isRootInsert": true,
      "isStatic": false,
      "key": undefined,
      "ns": undefined,
      "parent": undefined,
      "raw": false,
      "tag": "div",
      "text": undefined,
    },
    "_watcher": Watcher {
      "active": true,
      "cb": [Function],
      "deep": false,
      "depIds": Set {},
      "deps": Array [],
      "dirty": false,
      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
      "getter": [Function],
      "id": 6,
      "lazy": false,
      "newDepIds": Set {},
      "newDeps": Array [],
      "sync": true,
      "user": false,
      "value": undefined,
      "vm": [Circular],
    },
    "_watchers": Array [
      Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
        "getter": [Function],
        "id": 1,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": Array [],
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
        "getter": [Function],
        "id": 2,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": Array [],
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": true,
        "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
        "getter": [Function],
        "id": 3,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
        "getter": [Function],
        "id": 4,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": Array [],
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
        "getter": [Function],
        "id": 5,
        "lazy": true,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 6,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
    ],
    "internalActivePanelLabel": null,
    "onClickMenuButton": [Function],
  },
  "vnode": VNode {
    "asyncFactory": undefined,
    "asyncMeta": undefined,
    "children": Array [
      VNode {
        "asyncFactory": undefined,
        "asyncMeta": undefined,
        "children": undefined,
        "componentInstance": VueComponent {
          "$attrs": Object {},
          "$children": Array [],
          "$createElement": [Function],
          "$el": <div
            data-tipe-ui="TipeTabsMenu"
          />,
          "$emit": [Function],
          "$listeners": Object {
            "click": [Function],
          },
          "$options": Object {
            "_componentTag": undefined,
            "_parentElm": null,
            "_parentListeners": Object {
              "click": [Function],
            },
            "_parentVnode": [Circular],
            "_propKeys": Array [
              "buttons",
            ],
            "_refElm": null,
            "_renderChildren": undefined,
            "parent": VueComponent {
              "$attrs": Object {},
              "$children": Array [
                [Circular],
              ],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabs"
                style="height: 100%; width: 100%;"
              >
                <div
                  data-tipe-ui="TipeTabsMenu"
                />
              </div>,
              "$emit": [Function],
              "$listeners": Object {},
              "$options": Object {
                "_Ctor": Object {
                  "1": [Function],
                },
                "_base": [Function],
                "_parentElm": null,
                "_refElm": null,
                "beforeCreate": Array [
                  [Function],
                ],
                "components": Object {
                  "TipeTabsMenu": Object {
                    "attrs": undefined,
                    "class": undefined,
                    "domProps": undefined,
                    "functional": undefined,
                    "key": undefined,
                    "name": "TipeTabsMenu",
                    "nativeOn": undefined,
                    "normalizedStyle": undefined,
                    "on": undefined,
                    "props": Object {
                      "buttons": Object {
                        "type": [Function],
                        "validator": [Function],
                      },
                    },
                    "ref": undefined,
                    "render": [Function],
                    "staticClass": undefined,
                    "staticStyle": undefined,
                    "style": undefined,
                  },
                  "transition": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition",
                    "render": [Function],
                  },
                  "transition-group": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition-group",
                    "render": [Function],
                  },
                },
                "computed": Object {
                  "activePanelLabel": [Function],
                  "buttons": [Function],
                  "panel": [Function],
                  "panelVNodes": [Function],
                  "panels": [Function],
                },
                "data": [Function],
                "directives": Object {},
                "filters": Object {},
                "logModifiedComponents": true,
                "methods": Object {
                  "onClickMenuButton": [Function],
                },
                "name": "TipeTabs",
                "provide": [Function],
                "render": [Function],
              },
              "$parent": undefined,
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": undefined,
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_computedWatchers": Object {
                "activePanelLabel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "buttons": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "panelVNodes": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panels": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
              },
              "_data": Object {
                "internalActivePanelLabel": null,
              },
              "_directInactive": false,
              "_events": Object {},
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_provided": undefined,
              "_renderProxy": VueComponent {
                "$attrs": Object {},
                "$children": Array [
                  [Circular],
                ],
                "$createElement": [Function],
                "$el": <div
                  data-tipe-ui="TipeTabs"
                  style="height: 100%; width: 100%;"
                >
                  <div
                    data-tipe-ui="TipeTabsMenu"
                  />
                </div>,
                "$emit": [Function],
                "$listeners": Object {},
                "$options": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "_base": [Function],
                  "_parentElm": null,
                  "_refElm": null,
                  "beforeCreate": Array [
                    [Function],
                  ],
                  "components": Object {
                    "TipeTabsMenu": Object {
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "name": "TipeTabsMenu",
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "buttons": Object {
                          "type": [Function],
                          "validator": [Function],
                        },
                      },
                      "ref": undefined,
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                    "transition": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition",
                      "render": [Function],
                    },
                    "transition-group": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition-group",
                      "render": [Function],
                    },
                  },
                  "computed": Object {
                    "activePanelLabel": [Function],
                    "buttons": [Function],
                    "panel": [Function],
                    "panelVNodes": [Function],
                    "panels": [Function],
                  },
                  "data": [Function],
                  "directives": Object {},
                  "filters": Object {},
                  "logModifiedComponents": true,
                  "methods": Object {
                    "onClickMenuButton": [Function],
                  },
                  "name": "TipeTabs",
                  "provide": [Function],
                  "render": [Function],
                },
                "$parent": undefined,
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$vnode": undefined,
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_computedWatchers": Object {
                  "activePanelLabel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "buttons": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "panelVNodes": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panels": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                },
                "_data": Object {
                  "internalActivePanelLabel": null,
                },
                "_directInactive": false,
                "_events": Object {},
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_provided": undefined,
                "_renderProxy": [Circular],
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 0,
                "_vnode": [Circular],
                "_watcher": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 6,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
                "internalActivePanelLabel": null,
                "onClickMenuButton": [Function],
              },
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 0,
              "_vnode": [Circular],
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
              "internalActivePanelLabel": null,
              "onClickMenuButton": [Function],
            },
            "propsData": Object {
              "buttons": Array [],
            },
          },
          "$parent": VueComponent {
            "$attrs": Object {},
            "$children": Array [
              [Circular],
            ],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabs"
              style="height: 100%; width: 100%;"
            >
              <div
                data-tipe-ui="TipeTabsMenu"
              />
            </div>,
            "$emit": [Function],
            "$listeners": Object {},
            "$options": Object {
              "_Ctor": Object {
                "1": [Function],
              },
              "_base": [Function],
              "_parentElm": null,
              "_refElm": null,
              "beforeCreate": Array [
                [Function],
              ],
              "components": Object {
                "TipeTabsMenu": Object {
                  "attrs": undefined,
                  "class": undefined,
                  "domProps": undefined,
                  "functional": undefined,
                  "key": undefined,
                  "name": "TipeTabsMenu",
                  "nativeOn": undefined,
                  "normalizedStyle": undefined,
                  "on": undefined,
                  "props": Object {
                    "buttons": Object {
                      "type": [Function],
                      "validator": [Function],
                    },
                  },
                  "ref": undefined,
                  "render": [Function],
                  "staticClass": undefined,
                  "staticStyle": undefined,
                  "style": undefined,
                },
                "transition": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "name": "transition",
                  "render": [Function],
                },
                "transition-group": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "name": "transition-group",
                  "render": [Function],
                },
              },
              "computed": Object {
                "activePanelLabel": [Function],
                "buttons": [Function],
                "panel": [Function],
                "panelVNodes": [Function],
                "panels": [Function],
              },
              "data": [Function],
              "directives": Object {},
              "filters": Object {},
              "logModifiedComponents": true,
              "methods": Object {
                "onClickMenuButton": [Function],
              },
              "name": "TipeTabs",
              "provide": [Function],
              "render": [Function],
            },
            "$parent": undefined,
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": undefined,
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_computedWatchers": Object {
              "activePanelLabel": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": true,
                "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                "getter": [Function],
                "id": 3,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "buttons": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                "getter": [Function],
                "id": 4,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              "panel": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                "getter": [Function],
                "id": 5,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "panelVNodes": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                "getter": [Function],
                "id": 1,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              "panels": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                "getter": [Function],
                "id": 2,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
            },
            "_data": Object {
              "internalActivePanelLabel": null,
            },
            "_directInactive": false,
            "_events": Object {},
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_provided": undefined,
            "_renderProxy": VueComponent {
              "$attrs": Object {},
              "$children": Array [
                [Circular],
              ],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabs"
                style="height: 100%; width: 100%;"
              >
                <div
                  data-tipe-ui="TipeTabsMenu"
                />
              </div>,
              "$emit": [Function],
              "$listeners": Object {},
              "$options": Object {
                "_Ctor": Object {
                  "1": [Function],
                },
                "_base": [Function],
                "_parentElm": null,
                "_refElm": null,
                "beforeCreate": Array [
                  [Function],
                ],
                "components": Object {
                  "TipeTabsMenu": Object {
                    "attrs": undefined,
                    "class": undefined,
                    "domProps": undefined,
                    "functional": undefined,
                    "key": undefined,
                    "name": "TipeTabsMenu",
                    "nativeOn": undefined,
                    "normalizedStyle": undefined,
                    "on": undefined,
                    "props": Object {
                      "buttons": Object {
                        "type": [Function],
                        "validator": [Function],
                      },
                    },
                    "ref": undefined,
                    "render": [Function],
                    "staticClass": undefined,
                    "staticStyle": undefined,
                    "style": undefined,
                  },
                  "transition": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition",
                    "render": [Function],
                  },
                  "transition-group": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition-group",
                    "render": [Function],
                  },
                },
                "computed": Object {
                  "activePanelLabel": [Function],
                  "buttons": [Function],
                  "panel": [Function],
                  "panelVNodes": [Function],
                  "panels": [Function],
                },
                "data": [Function],
                "directives": Object {},
                "filters": Object {},
                "logModifiedComponents": true,
                "methods": Object {
                  "onClickMenuButton": [Function],
                },
                "name": "TipeTabs",
                "provide": [Function],
                "render": [Function],
              },
              "$parent": undefined,
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": undefined,
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_computedWatchers": Object {
                "activePanelLabel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "buttons": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "panelVNodes": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panels": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
              },
              "_data": Object {
                "internalActivePanelLabel": null,
              },
              "_directInactive": false,
              "_events": Object {},
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_provided": undefined,
              "_renderProxy": [Circular],
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 0,
              "_vnode": [Circular],
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
              "internalActivePanelLabel": null,
              "onClickMenuButton": [Function],
            },
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 0,
            "_vnode": [Circular],
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 6,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                "getter": [Function],
                "id": 1,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                "getter": [Function],
                "id": 2,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": true,
                "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                "getter": [Function],
                "id": 3,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                "getter": [Function],
                "id": 4,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                "getter": [Function],
                "id": 5,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
            "internalActivePanelLabel": null,
            "onClickMenuButton": [Function],
          },
          "$refs": Object {},
          "$root": VueComponent {
            "$attrs": Object {},
            "$children": Array [
              [Circular],
            ],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabs"
              style="height: 100%; width: 100%;"
            >
              <div
                data-tipe-ui="TipeTabsMenu"
              />
            </div>,
            "$emit": [Function],
            "$listeners": Object {},
            "$options": Object {
              "_Ctor": Object {
                "1": [Function],
              },
              "_base": [Function],
              "_parentElm": null,
              "_refElm": null,
              "beforeCreate": Array [
                [Function],
              ],
              "components": Object {
                "TipeTabsMenu": Object {
                  "attrs": undefined,
                  "class": undefined,
                  "domProps": undefined,
                  "functional": undefined,
                  "key": undefined,
                  "name": "TipeTabsMenu",
                  "nativeOn": undefined,
                  "normalizedStyle": undefined,
                  "on": undefined,
                  "props": Object {
                    "buttons": Object {
                      "type": [Function],
                      "validator": [Function],
                    },
                  },
                  "ref": undefined,
                  "render": [Function],
                  "staticClass": undefined,
                  "staticStyle": undefined,
                  "style": undefined,
                },
                "transition": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "name": "transition",
                  "render": [Function],
                },
                "transition-group": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "name": "transition-group",
                  "render": [Function],
                },
              },
              "computed": Object {
                "activePanelLabel": [Function],
                "buttons": [Function],
                "panel": [Function],
                "panelVNodes": [Function],
                "panels": [Function],
              },
              "data": [Function],
              "directives": Object {},
              "filters": Object {},
              "logModifiedComponents": true,
              "methods": Object {
                "onClickMenuButton": [Function],
              },
              "name": "TipeTabs",
              "provide": [Function],
              "render": [Function],
            },
            "$parent": undefined,
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": undefined,
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_computedWatchers": Object {
              "activePanelLabel": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": true,
                "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                "getter": [Function],
                "id": 3,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "buttons": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                "getter": [Function],
                "id": 4,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              "panel": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                "getter": [Function],
                "id": 5,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "panelVNodes": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                "getter": [Function],
                "id": 1,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              "panels": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                "getter": [Function],
                "id": 2,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
            },
            "_data": Object {
              "internalActivePanelLabel": null,
            },
            "_directInactive": false,
            "_events": Object {},
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_provided": undefined,
            "_renderProxy": VueComponent {
              "$attrs": Object {},
              "$children": Array [
                [Circular],
              ],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabs"
                style="height: 100%; width: 100%;"
              >
                <div
                  data-tipe-ui="TipeTabsMenu"
                />
              </div>,
              "$emit": [Function],
              "$listeners": Object {},
              "$options": Object {
                "_Ctor": Object {
                  "1": [Function],
                },
                "_base": [Function],
                "_parentElm": null,
                "_refElm": null,
                "beforeCreate": Array [
                  [Function],
                ],
                "components": Object {
                  "TipeTabsMenu": Object {
                    "attrs": undefined,
                    "class": undefined,
                    "domProps": undefined,
                    "functional": undefined,
                    "key": undefined,
                    "name": "TipeTabsMenu",
                    "nativeOn": undefined,
                    "normalizedStyle": undefined,
                    "on": undefined,
                    "props": Object {
                      "buttons": Object {
                        "type": [Function],
                        "validator": [Function],
                      },
                    },
                    "ref": undefined,
                    "render": [Function],
                    "staticClass": undefined,
                    "staticStyle": undefined,
                    "style": undefined,
                  },
                  "transition": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition",
                    "render": [Function],
                  },
                  "transition-group": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition-group",
                    "render": [Function],
                  },
                },
                "computed": Object {
                  "activePanelLabel": [Function],
                  "buttons": [Function],
                  "panel": [Function],
                  "panelVNodes": [Function],
                  "panels": [Function],
                },
                "data": [Function],
                "directives": Object {},
                "filters": Object {},
                "logModifiedComponents": true,
                "methods": Object {
                  "onClickMenuButton": [Function],
                },
                "name": "TipeTabs",
                "provide": [Function],
                "render": [Function],
              },
              "$parent": undefined,
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": undefined,
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_computedWatchers": Object {
                "activePanelLabel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "buttons": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "panelVNodes": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panels": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
              },
              "_data": Object {
                "internalActivePanelLabel": null,
              },
              "_directInactive": false,
              "_events": Object {},
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_provided": undefined,
              "_renderProxy": [Circular],
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 0,
              "_vnode": [Circular],
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
              "internalActivePanelLabel": null,
              "onClickMenuButton": [Function],
            },
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 0,
            "_vnode": [Circular],
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 6,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                "getter": [Function],
                "id": 1,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                "getter": [Function],
                "id": 2,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": true,
                "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                "getter": [Function],
                "id": 3,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                "getter": [Function],
                "id": 4,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                "getter": [Function],
                "id": 5,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
            "internalActivePanelLabel": null,
            "onClickMenuButton": [Function],
          },
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$vnode": [Circular],
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {
            "click": Array [
              [Function],
            ],
          },
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_props": Object {
            "buttons": Array [],
          },
          "_renderProxy": VueComponent {
            "$attrs": Object {},
            "$children": Array [],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "$emit": [Function],
            "$listeners": Object {
              "click": [Function],
            },
            "$options": Object {
              "_componentTag": undefined,
              "_parentElm": null,
              "_parentListeners": Object {
                "click": [Function],
              },
              "_parentVnode": [Circular],
              "_propKeys": Array [
                "buttons",
              ],
              "_refElm": null,
              "_renderChildren": undefined,
              "parent": VueComponent {
                "$attrs": Object {},
                "$children": Array [
                  [Circular],
                ],
                "$createElement": [Function],
                "$el": <div
                  data-tipe-ui="TipeTabs"
                  style="height: 100%; width: 100%;"
                >
                  <div
                    data-tipe-ui="TipeTabsMenu"
                  />
                </div>,
                "$emit": [Function],
                "$listeners": Object {},
                "$options": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "_base": [Function],
                  "_parentElm": null,
                  "_refElm": null,
                  "beforeCreate": Array [
                    [Function],
                  ],
                  "components": Object {
                    "TipeTabsMenu": Object {
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "name": "TipeTabsMenu",
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "buttons": Object {
                          "type": [Function],
                          "validator": [Function],
                        },
                      },
                      "ref": undefined,
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                    "transition": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition",
                      "render": [Function],
                    },
                    "transition-group": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition-group",
                      "render": [Function],
                    },
                  },
                  "computed": Object {
                    "activePanelLabel": [Function],
                    "buttons": [Function],
                    "panel": [Function],
                    "panelVNodes": [Function],
                    "panels": [Function],
                  },
                  "data": [Function],
                  "directives": Object {},
                  "filters": Object {},
                  "logModifiedComponents": true,
                  "methods": Object {
                    "onClickMenuButton": [Function],
                  },
                  "name": "TipeTabs",
                  "provide": [Function],
                  "render": [Function],
                },
                "$parent": undefined,
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$vnode": undefined,
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_computedWatchers": Object {
                  "activePanelLabel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "buttons": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "panelVNodes": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panels": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                },
                "_data": Object {
                  "internalActivePanelLabel": null,
                },
                "_directInactive": false,
                "_events": Object {},
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_provided": undefined,
                "_renderProxy": VueComponent {
                  "$attrs": Object {},
                  "$children": Array [
                    [Circular],
                  ],
                  "$createElement": [Function],
                  "$el": <div
                    data-tipe-ui="TipeTabs"
                    style="height: 100%; width: 100%;"
                  >
                    <div
                      data-tipe-ui="TipeTabsMenu"
                    />
                  </div>,
                  "$emit": [Function],
                  "$listeners": Object {},
                  "$options": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "_base": [Function],
                    "_parentElm": null,
                    "_refElm": null,
                    "beforeCreate": Array [
                      [Function],
                    ],
                    "components": Object {
                      "TipeTabsMenu": Object {
                        "attrs": undefined,
                        "class": undefined,
                        "domProps": undefined,
                        "functional": undefined,
                        "key": undefined,
                        "name": "TipeTabsMenu",
                        "nativeOn": undefined,
                        "normalizedStyle": undefined,
                        "on": undefined,
                        "props": Object {
                          "buttons": Object {
                            "type": [Function],
                            "validator": [Function],
                          },
                        },
                        "ref": undefined,
                        "render": [Function],
                        "staticClass": undefined,
                        "staticStyle": undefined,
                        "style": undefined,
                      },
                      "transition": Object {
                        "_Ctor": Object {
                          "1": [Function],
                        },
                        "name": "transition",
                        "render": [Function],
                      },
                      "transition-group": Object {
                        "_Ctor": Object {
                          "1": [Function],
                        },
                        "name": "transition-group",
                        "render": [Function],
                      },
                    },
                    "computed": Object {
                      "activePanelLabel": [Function],
                      "buttons": [Function],
                      "panel": [Function],
                      "panelVNodes": [Function],
                      "panels": [Function],
                    },
                    "data": [Function],
                    "directives": Object {},
                    "filters": Object {},
                    "logModifiedComponents": true,
                    "methods": Object {
                      "onClickMenuButton": [Function],
                    },
                    "name": "TipeTabs",
                    "provide": [Function],
                    "render": [Function],
                  },
                  "$parent": undefined,
                  "$refs": Object {},
                  "$root": [Circular],
                  "$scopedSlots": Object {},
                  "$slots": Object {},
                  "$vnode": undefined,
                  "__emitted": Object {},
                  "__emittedByOrder": Array [],
                  "_c": [Function],
                  "_computedWatchers": Object {
                    "activePanelLabel": Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": true,
                      "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                      "getter": [Function],
                      "id": 3,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                    "buttons": Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                      "getter": [Function],
                      "id": 4,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": Array [],
                      "vm": [Circular],
                    },
                    "panel": Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                      "getter": [Function],
                      "id": 5,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                    "panelVNodes": Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                      "getter": [Function],
                      "id": 1,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": Array [],
                      "vm": [Circular],
                    },
                    "panels": Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                      "getter": [Function],
                      "id": 2,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": Array [],
                      "vm": [Circular],
                    },
                  },
                  "_data": Object {
                    "internalActivePanelLabel": null,
                  },
                  "_directInactive": false,
                  "_events": Object {},
                  "_hasHookEvent": false,
                  "_inactive": null,
                  "_isBeingDestroyed": false,
                  "_isDestroyed": false,
                  "_isMounted": true,
                  "_isVue": true,
                  "_provided": undefined,
                  "_renderProxy": [Circular],
                  "_self": [Circular],
                  "_staticTrees": null,
                  "_uid": 0,
                  "_vnode": [Circular],
                  "_watcher": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 6,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "_watchers": Array [
                    Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                      "getter": [Function],
                      "id": 1,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": Array [],
                      "vm": [Circular],
                    },
                    Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                      "getter": [Function],
                      "id": 2,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": Array [],
                      "vm": [Circular],
                    },
                    Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": true,
                      "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                      "getter": [Function],
                      "id": 3,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                    Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                      "getter": [Function],
                      "id": 4,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": Array [],
                      "vm": [Circular],
                    },
                    Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                      "getter": [Function],
                      "id": 5,
                      "lazy": true,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                    Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {},
                      "deps": Array [],
                      "dirty": false,
                      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                      "getter": [Function],
                      "id": 6,
                      "lazy": false,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                  ],
                  "internalActivePanelLabel": null,
                  "onClickMenuButton": [Function],
                },
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 0,
                "_vnode": [Circular],
                "_watcher": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 6,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
                "internalActivePanelLabel": null,
                "onClickMenuButton": [Function],
              },
              "propsData": Object {
                "buttons": Array [],
              },
            },
            "$parent": VueComponent {
              "$attrs": Object {},
              "$children": Array [
                [Circular],
              ],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabs"
                style="height: 100%; width: 100%;"
              >
                <div
                  data-tipe-ui="TipeTabsMenu"
                />
              </div>,
              "$emit": [Function],
              "$listeners": Object {},
              "$options": Object {
                "_Ctor": Object {
                  "1": [Function],
                },
                "_base": [Function],
                "_parentElm": null,
                "_refElm": null,
                "beforeCreate": Array [
                  [Function],
                ],
                "components": Object {
                  "TipeTabsMenu": Object {
                    "attrs": undefined,
                    "class": undefined,
                    "domProps": undefined,
                    "functional": undefined,
                    "key": undefined,
                    "name": "TipeTabsMenu",
                    "nativeOn": undefined,
                    "normalizedStyle": undefined,
                    "on": undefined,
                    "props": Object {
                      "buttons": Object {
                        "type": [Function],
                        "validator": [Function],
                      },
                    },
                    "ref": undefined,
                    "render": [Function],
                    "staticClass": undefined,
                    "staticStyle": undefined,
                    "style": undefined,
                  },
                  "transition": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition",
                    "render": [Function],
                  },
                  "transition-group": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition-group",
                    "render": [Function],
                  },
                },
                "computed": Object {
                  "activePanelLabel": [Function],
                  "buttons": [Function],
                  "panel": [Function],
                  "panelVNodes": [Function],
                  "panels": [Function],
                },
                "data": [Function],
                "directives": Object {},
                "filters": Object {},
                "logModifiedComponents": true,
                "methods": Object {
                  "onClickMenuButton": [Function],
                },
                "name": "TipeTabs",
                "provide": [Function],
                "render": [Function],
              },
              "$parent": undefined,
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": undefined,
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_computedWatchers": Object {
                "activePanelLabel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "buttons": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "panelVNodes": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panels": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
              },
              "_data": Object {
                "internalActivePanelLabel": null,
              },
              "_directInactive": false,
              "_events": Object {},
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_provided": undefined,
              "_renderProxy": VueComponent {
                "$attrs": Object {},
                "$children": Array [
                  [Circular],
                ],
                "$createElement": [Function],
                "$el": <div
                  data-tipe-ui="TipeTabs"
                  style="height: 100%; width: 100%;"
                >
                  <div
                    data-tipe-ui="TipeTabsMenu"
                  />
                </div>,
                "$emit": [Function],
                "$listeners": Object {},
                "$options": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "_base": [Function],
                  "_parentElm": null,
                  "_refElm": null,
                  "beforeCreate": Array [
                    [Function],
                  ],
                  "components": Object {
                    "TipeTabsMenu": Object {
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "name": "TipeTabsMenu",
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "buttons": Object {
                          "type": [Function],
                          "validator": [Function],
                        },
                      },
                      "ref": undefined,
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                    "transition": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition",
                      "render": [Function],
                    },
                    "transition-group": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition-group",
                      "render": [Function],
                    },
                  },
                  "computed": Object {
                    "activePanelLabel": [Function],
                    "buttons": [Function],
                    "panel": [Function],
                    "panelVNodes": [Function],
                    "panels": [Function],
                  },
                  "data": [Function],
                  "directives": Object {},
                  "filters": Object {},
                  "logModifiedComponents": true,
                  "methods": Object {
                    "onClickMenuButton": [Function],
                  },
                  "name": "TipeTabs",
                  "provide": [Function],
                  "render": [Function],
                },
                "$parent": undefined,
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$vnode": undefined,
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_computedWatchers": Object {
                  "activePanelLabel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "buttons": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "panelVNodes": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panels": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                },
                "_data": Object {
                  "internalActivePanelLabel": null,
                },
                "_directInactive": false,
                "_events": Object {},
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_provided": undefined,
                "_renderProxy": [Circular],
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 0,
                "_vnode": [Circular],
                "_watcher": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 6,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
                "internalActivePanelLabel": null,
                "onClickMenuButton": [Function],
              },
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 0,
              "_vnode": [Circular],
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
              "internalActivePanelLabel": null,
              "onClickMenuButton": [Function],
            },
            "$refs": Object {},
            "$root": VueComponent {
              "$attrs": Object {},
              "$children": Array [
                [Circular],
              ],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabs"
                style="height: 100%; width: 100%;"
              >
                <div
                  data-tipe-ui="TipeTabsMenu"
                />
              </div>,
              "$emit": [Function],
              "$listeners": Object {},
              "$options": Object {
                "_Ctor": Object {
                  "1": [Function],
                },
                "_base": [Function],
                "_parentElm": null,
                "_refElm": null,
                "beforeCreate": Array [
                  [Function],
                ],
                "components": Object {
                  "TipeTabsMenu": Object {
                    "attrs": undefined,
                    "class": undefined,
                    "domProps": undefined,
                    "functional": undefined,
                    "key": undefined,
                    "name": "TipeTabsMenu",
                    "nativeOn": undefined,
                    "normalizedStyle": undefined,
                    "on": undefined,
                    "props": Object {
                      "buttons": Object {
                        "type": [Function],
                        "validator": [Function],
                      },
                    },
                    "ref": undefined,
                    "render": [Function],
                    "staticClass": undefined,
                    "staticStyle": undefined,
                    "style": undefined,
                  },
                  "transition": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition",
                    "render": [Function],
                  },
                  "transition-group": Object {
                    "_Ctor": Object {
                      "1": [Function],
                    },
                    "name": "transition-group",
                    "render": [Function],
                  },
                },
                "computed": Object {
                  "activePanelLabel": [Function],
                  "buttons": [Function],
                  "panel": [Function],
                  "panelVNodes": [Function],
                  "panels": [Function],
                },
                "data": [Function],
                "directives": Object {},
                "filters": Object {},
                "logModifiedComponents": true,
                "methods": Object {
                  "onClickMenuButton": [Function],
                },
                "name": "TipeTabs",
                "provide": [Function],
                "render": [Function],
              },
              "$parent": undefined,
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": undefined,
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_computedWatchers": Object {
                "activePanelLabel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "buttons": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panel": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "panelVNodes": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                "panels": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
              },
              "_data": Object {
                "internalActivePanelLabel": null,
              },
              "_directInactive": false,
              "_events": Object {},
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_provided": undefined,
              "_renderProxy": VueComponent {
                "$attrs": Object {},
                "$children": Array [
                  [Circular],
                ],
                "$createElement": [Function],
                "$el": <div
                  data-tipe-ui="TipeTabs"
                  style="height: 100%; width: 100%;"
                >
                  <div
                    data-tipe-ui="TipeTabsMenu"
                  />
                </div>,
                "$emit": [Function],
                "$listeners": Object {},
                "$options": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "_base": [Function],
                  "_parentElm": null,
                  "_refElm": null,
                  "beforeCreate": Array [
                    [Function],
                  ],
                  "components": Object {
                    "TipeTabsMenu": Object {
                      "attrs": undefined,
                      "class": undefined,
                      "domProps": undefined,
                      "functional": undefined,
                      "key": undefined,
                      "name": "TipeTabsMenu",
                      "nativeOn": undefined,
                      "normalizedStyle": undefined,
                      "on": undefined,
                      "props": Object {
                        "buttons": Object {
                          "type": [Function],
                          "validator": [Function],
                        },
                      },
                      "ref": undefined,
                      "render": [Function],
                      "staticClass": undefined,
                      "staticStyle": undefined,
                      "style": undefined,
                    },
                    "transition": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition",
                      "render": [Function],
                    },
                    "transition-group": Object {
                      "_Ctor": Object {
                        "1": [Function],
                      },
                      "name": "transition-group",
                      "render": [Function],
                    },
                  },
                  "computed": Object {
                    "activePanelLabel": [Function],
                    "buttons": [Function],
                    "panel": [Function],
                    "panelVNodes": [Function],
                    "panels": [Function],
                  },
                  "data": [Function],
                  "directives": Object {},
                  "filters": Object {},
                  "logModifiedComponents": true,
                  "methods": Object {
                    "onClickMenuButton": [Function],
                  },
                  "name": "TipeTabs",
                  "provide": [Function],
                  "render": [Function],
                },
                "$parent": undefined,
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$vnode": undefined,
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_computedWatchers": Object {
                  "activePanelLabel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "buttons": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panel": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "panelVNodes": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  "panels": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                },
                "_data": Object {
                  "internalActivePanelLabel": null,
                },
                "_directInactive": false,
                "_events": Object {},
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_provided": undefined,
                "_renderProxy": [Circular],
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 0,
                "_vnode": [Circular],
                "_watcher": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                    "getter": [Function],
                    "id": 1,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                    "getter": [Function],
                    "id": 2,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": true,
                    "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                    "getter": [Function],
                    "id": 3,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                    "getter": [Function],
                    "id": 4,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": Array [],
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                    "getter": [Function],
                    "id": 5,
                    "lazy": true,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {},
                    "deps": Array [],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 6,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
                "internalActivePanelLabel": null,
                "onClickMenuButton": [Function],
              },
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 0,
              "_vnode": [Circular],
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                  "getter": [Function],
                  "id": 1,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                  "getter": [Function],
                  "id": 2,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": true,
                  "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                  "getter": [Function],
                  "id": 3,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                  "getter": [Function],
                  "id": 4,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": Array [],
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                  "getter": [Function],
                  "id": 5,
                  "lazy": true,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {},
                  "deps": Array [],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 6,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
              "internalActivePanelLabel": null,
              "onClickMenuButton": [Function],
            },
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": [Circular],
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_data": Object {},
            "_directInactive": false,
            "_events": Object {
              "click": Array [
                [Function],
              ],
            },
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_props": Object {
              "buttons": Array [],
            },
            "_renderProxy": [Circular],
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 1,
            "_vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": Array [],
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": [Circular],
              "data": Object {
                "attrs": Object {
                  "data-tipe-ui": "TipeTabsMenu",
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": true,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": [Circular],
              "raw": false,
              "tag": "div",
              "text": undefined,
            },
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
          },
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 1,
          "_vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": Array [],
            "componentInstance": undefined,
            "componentOptions": undefined,
            "context": [Circular],
            "data": Object {
              "attrs": Object {
                "data-tipe-ui": "TipeTabsMenu",
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": true,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": [Circular],
            "raw": false,
            "tag": "div",
            "text": undefined,
          },
          "_watcher": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              6,
            },
            "deps": Array [
              Dep {
                "_sortedId": 0,
                "id": 6,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 7,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
        },
        "componentOptions": Object {
          "Ctor": [Function],
          "children": undefined,
          "listeners": Object {
            "click": [Function],
          },
          "propsData": Object {
            "buttons": Array [],
          },
          "tag": undefined,
        },
        "context": VueComponent {
          "$attrs": Object {},
          "$children": Array [
            VueComponent {
              "$attrs": Object {},
              "$children": Array [],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "$emit": [Function],
              "$listeners": Object {
                "click": [Function],
              },
              "$options": Object {
                "_componentTag": undefined,
                "_parentElm": null,
                "_parentListeners": Object {
                  "click": [Function],
                },
                "_parentVnode": [Circular],
                "_propKeys": Array [
                  "buttons",
                ],
                "_refElm": null,
                "_renderChildren": undefined,
                "parent": [Circular],
                "propsData": Object {
                  "buttons": Array [],
                },
              },
              "$parent": [Circular],
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": [Circular],
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_data": Object {},
              "_directInactive": false,
              "_events": Object {
                "click": Array [
                  [Function],
                ],
              },
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_props": Object {
                "buttons": Array [],
              },
              "_renderProxy": VueComponent {
                "$attrs": Object {},
                "$children": Array [],
                "$createElement": [Function],
                "$el": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "$emit": [Function],
                "$listeners": Object {
                  "click": [Function],
                },
                "$options": Object {
                  "_componentTag": undefined,
                  "_parentElm": null,
                  "_parentListeners": Object {
                    "click": [Function],
                  },
                  "_parentVnode": [Circular],
                  "_propKeys": Array [
                    "buttons",
                  ],
                  "_refElm": null,
                  "_renderChildren": undefined,
                  "parent": [Circular],
                  "propsData": Object {
                    "buttons": Array [],
                  },
                },
                "$parent": [Circular],
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$vnode": [Circular],
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_data": Object {},
                "_directInactive": false,
                "_events": Object {
                  "click": Array [
                    [Function],
                  ],
                },
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_props": Object {
                  "buttons": Array [],
                },
                "_renderProxy": [Circular],
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 1,
                "_vnode": VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": Array [],
                  "componentInstance": undefined,
                  "componentOptions": undefined,
                  "context": [Circular],
                  "data": Object {
                    "attrs": Object {
                      "data-tipe-ui": "TipeTabsMenu",
                    },
                  },
                  "elm": <div
                    data-tipe-ui="TipeTabsMenu"
                  />,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": true,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": [Circular],
                  "raw": false,
                  "tag": "div",
                  "text": undefined,
                },
                "_watcher": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {
                    6,
                  },
                  "deps": Array [
                    Dep {
                      "_sortedId": 0,
                      "id": 6,
                      "subs": Array [
                        [Circular],
                      ],
                    },
                  ],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 7,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      6,
                    },
                    "deps": Array [
                      Dep {
                        "_sortedId": 0,
                        "id": 6,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
              },
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 1,
              "_vnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": Array [],
                "componentInstance": undefined,
                "componentOptions": undefined,
                "context": [Circular],
                "data": Object {
                  "attrs": Object {
                    "data-tipe-ui": "TipeTabsMenu",
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": true,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": [Circular],
                "raw": false,
                "tag": "div",
                "text": undefined,
              },
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {
                    6,
                  },
                  "deps": Array [
                    Dep {
                      "_sortedId": 0,
                      "id": 6,
                      "subs": Array [
                        [Circular],
                      ],
                    },
                  ],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 7,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
            },
          ],
          "$createElement": [Function],
          "$el": <div
            data-tipe-ui="TipeTabs"
            style="height: 100%; width: 100%;"
          >
            <div
              data-tipe-ui="TipeTabsMenu"
            />
          </div>,
          "$emit": [Function],
          "$listeners": Object {},
          "$options": Object {
            "_Ctor": Object {
              "1": [Function],
            },
            "_base": [Function],
            "_parentElm": null,
            "_refElm": null,
            "beforeCreate": Array [
              [Function],
            ],
            "components": Object {
              "TipeTabsMenu": Object {
                "attrs": undefined,
                "class": undefined,
                "domProps": undefined,
                "functional": undefined,
                "key": undefined,
                "name": "TipeTabsMenu",
                "nativeOn": undefined,
                "normalizedStyle": undefined,
                "on": undefined,
                "props": Object {
                  "buttons": Object {
                    "type": [Function],
                    "validator": [Function],
                  },
                },
                "ref": undefined,
                "render": [Function],
                "staticClass": undefined,
                "staticStyle": undefined,
                "style": undefined,
              },
              "transition": Object {
                "_Ctor": Object {
                  "1": [Function],
                },
                "name": "transition",
                "render": [Function],
              },
              "transition-group": Object {
                "_Ctor": Object {
                  "1": [Function],
                },
                "name": "transition-group",
                "render": [Function],
              },
            },
            "computed": Object {
              "activePanelLabel": [Function],
              "buttons": [Function],
              "panel": [Function],
              "panelVNodes": [Function],
              "panels": [Function],
            },
            "data": [Function],
            "directives": Object {},
            "filters": Object {},
            "logModifiedComponents": true,
            "methods": Object {
              "onClickMenuButton": [Function],
            },
            "name": "TipeTabs",
            "provide": [Function],
            "render": [Function],
          },
          "$parent": undefined,
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$vnode": undefined,
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_computedWatchers": Object {
            "activePanelLabel": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": true,
              "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
              "getter": [Function],
              "id": 3,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "buttons": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
              "getter": [Function],
              "id": 4,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": Array [],
              "vm": [Circular],
            },
            "panel": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
              "getter": [Function],
              "id": 5,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "panelVNodes": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
              "getter": [Function],
              "id": 1,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": Array [],
              "vm": [Circular],
            },
            "panels": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
              "getter": [Function],
              "id": 2,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": Array [],
              "vm": [Circular],
            },
          },
          "_data": Object {
            "internalActivePanelLabel": null,
          },
          "_directInactive": false,
          "_events": Object {},
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_provided": undefined,
          "_renderProxy": VueComponent {
            "$attrs": Object {},
            "$children": Array [
              VueComponent {
                "$attrs": Object {},
                "$children": Array [],
                "$createElement": [Function],
                "$el": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "$emit": [Function],
                "$listeners": Object {
                  "click": [Function],
                },
                "$options": Object {
                  "_componentTag": undefined,
                  "_parentElm": null,
                  "_parentListeners": Object {
                    "click": [Function],
                  },
                  "_parentVnode": [Circular],
                  "_propKeys": Array [
                    "buttons",
                  ],
                  "_refElm": null,
                  "_renderChildren": undefined,
                  "parent": [Circular],
                  "propsData": Object {
                    "buttons": Array [],
                  },
                },
                "$parent": [Circular],
                "$refs": Object {},
                "$root": [Circular],
                "$scopedSlots": Object {},
                "$slots": Object {},
                "$vnode": [Circular],
                "__emitted": Object {},
                "__emittedByOrder": Array [],
                "_c": [Function],
                "_data": Object {},
                "_directInactive": false,
                "_events": Object {
                  "click": Array [
                    [Function],
                  ],
                },
                "_hasHookEvent": false,
                "_inactive": null,
                "_isBeingDestroyed": false,
                "_isDestroyed": false,
                "_isMounted": true,
                "_isVue": true,
                "_props": Object {
                  "buttons": Array [],
                },
                "_renderProxy": VueComponent {
                  "$attrs": Object {},
                  "$children": Array [],
                  "$createElement": [Function],
                  "$el": <div
                    data-tipe-ui="TipeTabsMenu"
                  />,
                  "$emit": [Function],
                  "$listeners": Object {
                    "click": [Function],
                  },
                  "$options": Object {
                    "_componentTag": undefined,
                    "_parentElm": null,
                    "_parentListeners": Object {
                      "click": [Function],
                    },
                    "_parentVnode": [Circular],
                    "_propKeys": Array [
                      "buttons",
                    ],
                    "_refElm": null,
                    "_renderChildren": undefined,
                    "parent": [Circular],
                    "propsData": Object {
                      "buttons": Array [],
                    },
                  },
                  "$parent": [Circular],
                  "$refs": Object {},
                  "$root": [Circular],
                  "$scopedSlots": Object {},
                  "$slots": Object {},
                  "$vnode": [Circular],
                  "__emitted": Object {},
                  "__emittedByOrder": Array [],
                  "_c": [Function],
                  "_data": Object {},
                  "_directInactive": false,
                  "_events": Object {
                    "click": Array [
                      [Function],
                    ],
                  },
                  "_hasHookEvent": false,
                  "_inactive": null,
                  "_isBeingDestroyed": false,
                  "_isDestroyed": false,
                  "_isMounted": true,
                  "_isVue": true,
                  "_props": Object {
                    "buttons": Array [],
                  },
                  "_renderProxy": [Circular],
                  "_self": [Circular],
                  "_staticTrees": null,
                  "_uid": 1,
                  "_vnode": VNode {
                    "asyncFactory": undefined,
                    "asyncMeta": undefined,
                    "children": Array [],
                    "componentInstance": undefined,
                    "componentOptions": undefined,
                    "context": [Circular],
                    "data": Object {
                      "attrs": Object {
                        "data-tipe-ui": "TipeTabsMenu",
                      },
                    },
                    "elm": <div
                      data-tipe-ui="TipeTabsMenu"
                    />,
                    "fnContext": undefined,
                    "fnOptions": undefined,
                    "fnScopeId": undefined,
                    "isAsyncPlaceholder": false,
                    "isCloned": false,
                    "isComment": false,
                    "isOnce": false,
                    "isRootInsert": true,
                    "isStatic": false,
                    "key": undefined,
                    "ns": undefined,
                    "parent": [Circular],
                    "raw": false,
                    "tag": "div",
                    "text": undefined,
                  },
                  "_watcher": Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      6,
                    },
                    "deps": Array [
                      Dep {
                        "_sortedId": 0,
                        "id": 6,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                  "_watchers": Array [
                    Watcher {
                      "active": true,
                      "cb": [Function],
                      "deep": false,
                      "depIds": Set {
                        6,
                      },
                      "deps": Array [
                        Dep {
                          "_sortedId": 0,
                          "id": 6,
                          "subs": Array [
                            [Circular],
                          ],
                        },
                      ],
                      "dirty": false,
                      "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                      "getter": [Function],
                      "id": 7,
                      "lazy": false,
                      "newDepIds": Set {},
                      "newDeps": Array [],
                      "sync": true,
                      "user": false,
                      "value": undefined,
                      "vm": [Circular],
                    },
                  ],
                },
                "_self": [Circular],
                "_staticTrees": null,
                "_uid": 1,
                "_vnode": VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": Array [],
                  "componentInstance": undefined,
                  "componentOptions": undefined,
                  "context": [Circular],
                  "data": Object {
                    "attrs": Object {
                      "data-tipe-ui": "TipeTabsMenu",
                    },
                  },
                  "elm": <div
                    data-tipe-ui="TipeTabsMenu"
                  />,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": true,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": [Circular],
                  "raw": false,
                  "tag": "div",
                  "text": undefined,
                },
                "_watcher": Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {
                    6,
                  },
                  "deps": Array [
                    Dep {
                      "_sortedId": 0,
                      "id": 6,
                      "subs": Array [
                        [Circular],
                      ],
                    },
                  ],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 7,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
                "_watchers": Array [
                  Watcher {
                    "active": true,
                    "cb": [Function],
                    "deep": false,
                    "depIds": Set {
                      6,
                    },
                    "deps": Array [
                      Dep {
                        "_sortedId": 0,
                        "id": 6,
                        "subs": Array [
                          [Circular],
                        ],
                      },
                    ],
                    "dirty": false,
                    "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                    "getter": [Function],
                    "id": 7,
                    "lazy": false,
                    "newDepIds": Set {},
                    "newDeps": Array [],
                    "sync": true,
                    "user": false,
                    "value": undefined,
                    "vm": [Circular],
                  },
                ],
              },
            ],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabs"
              style="height: 100%; width: 100%;"
            >
              <div
                data-tipe-ui="TipeTabsMenu"
              />
            </div>,
            "$emit": [Function],
            "$listeners": Object {},
            "$options": Object {
              "_Ctor": Object {
                "1": [Function],
              },
              "_base": [Function],
              "_parentElm": null,
              "_refElm": null,
              "beforeCreate": Array [
                [Function],
              ],
              "components": Object {
                "TipeTabsMenu": Object {
                  "attrs": undefined,
                  "class": undefined,
                  "domProps": undefined,
                  "functional": undefined,
                  "key": undefined,
                  "name": "TipeTabsMenu",
                  "nativeOn": undefined,
                  "normalizedStyle": undefined,
                  "on": undefined,
                  "props": Object {
                    "buttons": Object {
                      "type": [Function],
                      "validator": [Function],
                    },
                  },
                  "ref": undefined,
                  "render": [Function],
                  "staticClass": undefined,
                  "staticStyle": undefined,
                  "style": undefined,
                },
                "transition": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "name": "transition",
                  "render": [Function],
                },
                "transition-group": Object {
                  "_Ctor": Object {
                    "1": [Function],
                  },
                  "name": "transition-group",
                  "render": [Function],
                },
              },
              "computed": Object {
                "activePanelLabel": [Function],
                "buttons": [Function],
                "panel": [Function],
                "panelVNodes": [Function],
                "panels": [Function],
              },
              "data": [Function],
              "directives": Object {},
              "filters": Object {},
              "logModifiedComponents": true,
              "methods": Object {
                "onClickMenuButton": [Function],
              },
              "name": "TipeTabs",
              "provide": [Function],
              "render": [Function],
            },
            "$parent": undefined,
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": undefined,
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_computedWatchers": Object {
              "activePanelLabel": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": true,
                "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                "getter": [Function],
                "id": 3,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "buttons": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                "getter": [Function],
                "id": 4,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              "panel": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                "getter": [Function],
                "id": 5,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "panelVNodes": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                "getter": [Function],
                "id": 1,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              "panels": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                "getter": [Function],
                "id": 2,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
            },
            "_data": Object {
              "internalActivePanelLabel": null,
            },
            "_directInactive": false,
            "_events": Object {},
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_provided": undefined,
            "_renderProxy": [Circular],
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 0,
            "_vnode": [Circular],
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 6,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
                "getter": [Function],
                "id": 1,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
                "getter": [Function],
                "id": 2,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": true,
                "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
                "getter": [Function],
                "id": 3,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
                "getter": [Function],
                "id": 4,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": Array [],
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
                "getter": [Function],
                "id": 5,
                "lazy": true,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {},
                "deps": Array [],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 6,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
            "internalActivePanelLabel": null,
            "onClickMenuButton": [Function],
          },
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 0,
          "_vnode": [Circular],
          "_watcher": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 6,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
              "getter": [Function],
              "id": 1,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": Array [],
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
              "getter": [Function],
              "id": 2,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": Array [],
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": true,
              "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
              "getter": [Function],
              "id": 3,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
              "getter": [Function],
              "id": 4,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": Array [],
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
              "getter": [Function],
              "id": 5,
              "lazy": true,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {},
              "deps": Array [],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 6,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
          "internalActivePanelLabel": null,
          "onClickMenuButton": [Function],
        },
        "data": Object {
          "hook": Object {
            "destroy": [Function],
            "init": [Function],
            "insert": [Function],
            "prepatch": [Function],
          },
          "on": undefined,
          "pendingInsert": null,
          "props": Object {
            "buttons": Array [],
          },
        },
        "elm": <div
          data-tipe-ui="TipeTabsMenu"
        />,
        "fnContext": undefined,
        "fnOptions": undefined,
        "fnScopeId": undefined,
        "isAsyncPlaceholder": false,
        "isCloned": false,
        "isComment": false,
        "isOnce": false,
        "isRootInsert": false,
        "isStatic": false,
        "key": undefined,
        "ns": undefined,
        "parent": undefined,
        "raw": false,
        "tag": "vue-component-5-TipeTabsMenu",
        "text": undefined,
      },
    ],
    "componentInstance": undefined,
    "componentOptions": undefined,
    "context": VueComponent {
      "$attrs": Object {},
      "$children": Array [
        VueComponent {
          "$attrs": Object {},
          "$children": Array [],
          "$createElement": [Function],
          "$el": <div
            data-tipe-ui="TipeTabsMenu"
          />,
          "$emit": [Function],
          "$listeners": Object {
            "click": [Function],
          },
          "$options": Object {
            "_componentTag": undefined,
            "_parentElm": null,
            "_parentListeners": Object {
              "click": [Function],
            },
            "_parentVnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "_propKeys": Array [
              "buttons",
            ],
            "_refElm": null,
            "_renderChildren": undefined,
            "parent": [Circular],
            "propsData": Object {
              "buttons": Array [],
            },
          },
          "$parent": [Circular],
          "$refs": Object {},
          "$root": [Circular],
          "$scopedSlots": Object {},
          "$slots": Object {},
          "$vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": undefined,
            "componentInstance": [Circular],
            "componentOptions": Object {
              "Ctor": [Function],
              "children": undefined,
              "listeners": Object {
                "click": [Function],
              },
              "propsData": Object {
                "buttons": Array [],
              },
              "tag": undefined,
            },
            "context": [Circular],
            "data": Object {
              "hook": Object {
                "destroy": [Function],
                "init": [Function],
                "insert": [Function],
                "prepatch": [Function],
              },
              "on": undefined,
              "pendingInsert": null,
              "props": Object {
                "buttons": Array [],
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": false,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": undefined,
            "raw": false,
            "tag": "vue-component-5-TipeTabsMenu",
            "text": undefined,
          },
          "__emitted": Object {},
          "__emittedByOrder": Array [],
          "_c": [Function],
          "_data": Object {},
          "_directInactive": false,
          "_events": Object {
            "click": Array [
              [Function],
            ],
          },
          "_hasHookEvent": false,
          "_inactive": null,
          "_isBeingDestroyed": false,
          "_isDestroyed": false,
          "_isMounted": true,
          "_isVue": true,
          "_props": Object {
            "buttons": Array [],
          },
          "_renderProxy": VueComponent {
            "$attrs": Object {},
            "$children": Array [],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "$emit": [Function],
            "$listeners": Object {
              "click": [Function],
            },
            "$options": Object {
              "_componentTag": undefined,
              "_parentElm": null,
              "_parentListeners": Object {
                "click": [Function],
              },
              "_parentVnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": [Circular],
                "componentOptions": Object {
                  "Ctor": [Function],
                  "children": undefined,
                  "listeners": Object {
                    "click": [Function],
                  },
                  "propsData": Object {
                    "buttons": Array [],
                  },
                  "tag": undefined,
                },
                "context": [Circular],
                "data": Object {
                  "hook": Object {
                    "destroy": [Function],
                    "init": [Function],
                    "insert": [Function],
                    "prepatch": [Function],
                  },
                  "on": undefined,
                  "pendingInsert": null,
                  "props": Object {
                    "buttons": Array [],
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": "vue-component-5-TipeTabsMenu",
                "text": undefined,
              },
              "_propKeys": Array [
                "buttons",
              ],
              "_refElm": null,
              "_renderChildren": undefined,
              "parent": [Circular],
              "propsData": Object {
                "buttons": Array [],
              },
            },
            "$parent": [Circular],
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_data": Object {},
            "_directInactive": false,
            "_events": Object {
              "click": Array [
                [Function],
              ],
            },
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_props": Object {
              "buttons": Array [],
            },
            "_renderProxy": [Circular],
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 1,
            "_vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": Array [],
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": [Circular],
              "data": Object {
                "attrs": Object {
                  "data-tipe-ui": "TipeTabsMenu",
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": true,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": [Circular],
                "componentOptions": Object {
                  "Ctor": [Function],
                  "children": undefined,
                  "listeners": Object {
                    "click": [Function],
                  },
                  "propsData": Object {
                    "buttons": Array [],
                  },
                  "tag": undefined,
                },
                "context": [Circular],
                "data": Object {
                  "hook": Object {
                    "destroy": [Function],
                    "init": [Function],
                    "insert": [Function],
                    "prepatch": [Function],
                  },
                  "on": undefined,
                  "pendingInsert": null,
                  "props": Object {
                    "buttons": Array [],
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": "vue-component-5-TipeTabsMenu",
                "text": undefined,
              },
              "raw": false,
              "tag": "div",
              "text": undefined,
            },
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
          },
          "_self": [Circular],
          "_staticTrees": null,
          "_uid": 1,
          "_vnode": VNode {
            "asyncFactory": undefined,
            "asyncMeta": undefined,
            "children": Array [],
            "componentInstance": undefined,
            "componentOptions": undefined,
            "context": [Circular],
            "data": Object {
              "attrs": Object {
                "data-tipe-ui": "TipeTabsMenu",
              },
            },
            "elm": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "fnContext": undefined,
            "fnOptions": undefined,
            "fnScopeId": undefined,
            "isAsyncPlaceholder": false,
            "isCloned": false,
            "isComment": false,
            "isOnce": false,
            "isRootInsert": true,
            "isStatic": false,
            "key": undefined,
            "ns": undefined,
            "parent": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "raw": false,
            "tag": "div",
            "text": undefined,
          },
          "_watcher": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {
              6,
            },
            "deps": Array [
              Dep {
                "_sortedId": 0,
                "id": 6,
                "subs": Array [
                  [Circular],
                ],
              },
            ],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 7,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "_watchers": Array [
            Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
          ],
        },
      ],
      "$createElement": [Function],
      "$el": <div
        data-tipe-ui="TipeTabs"
        style="height: 100%; width: 100%;"
      >
        <div
          data-tipe-ui="TipeTabsMenu"
        />
      </div>,
      "$emit": [Function],
      "$listeners": Object {},
      "$options": Object {
        "_Ctor": Object {
          "1": [Function],
        },
        "_base": [Function],
        "_parentElm": null,
        "_refElm": null,
        "beforeCreate": Array [
          [Function],
        ],
        "components": Object {
          "TipeTabsMenu": Object {
            "attrs": undefined,
            "class": undefined,
            "domProps": undefined,
            "functional": undefined,
            "key": undefined,
            "name": "TipeTabsMenu",
            "nativeOn": undefined,
            "normalizedStyle": undefined,
            "on": undefined,
            "props": Object {
              "buttons": Object {
                "type": [Function],
                "validator": [Function],
              },
            },
            "ref": undefined,
            "render": [Function],
            "staticClass": undefined,
            "staticStyle": undefined,
            "style": undefined,
          },
          "transition": Object {
            "_Ctor": Object {
              "1": [Function],
            },
            "name": "transition",
            "render": [Function],
          },
          "transition-group": Object {
            "_Ctor": Object {
              "1": [Function],
            },
            "name": "transition-group",
            "render": [Function],
          },
        },
        "computed": Object {
          "activePanelLabel": [Function],
          "buttons": [Function],
          "panel": [Function],
          "panelVNodes": [Function],
          "panels": [Function],
        },
        "data": [Function],
        "directives": Object {},
        "filters": Object {},
        "logModifiedComponents": true,
        "methods": Object {
          "onClickMenuButton": [Function],
        },
        "name": "TipeTabs",
        "provide": [Function],
        "render": [Function],
      },
      "$parent": undefined,
      "$refs": Object {},
      "$root": [Circular],
      "$scopedSlots": Object {},
      "$slots": Object {},
      "$vnode": undefined,
      "__emitted": Object {},
      "__emittedByOrder": Array [],
      "_c": [Function],
      "_computedWatchers": Object {
        "activePanelLabel": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": true,
          "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
          "getter": [Function],
          "id": 3,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "buttons": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
          "getter": [Function],
          "id": 4,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        "panel": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
          "getter": [Function],
          "id": 5,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "panelVNodes": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
          "getter": [Function],
          "id": 1,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        "panels": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
          "getter": [Function],
          "id": 2,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
      },
      "_data": Object {
        "internalActivePanelLabel": null,
      },
      "_directInactive": false,
      "_events": Object {},
      "_hasHookEvent": false,
      "_inactive": null,
      "_isBeingDestroyed": false,
      "_isDestroyed": false,
      "_isMounted": true,
      "_isVue": true,
      "_provided": undefined,
      "_renderProxy": VueComponent {
        "$attrs": Object {},
        "$children": Array [
          VueComponent {
            "$attrs": Object {},
            "$children": Array [],
            "$createElement": [Function],
            "$el": <div
              data-tipe-ui="TipeTabsMenu"
            />,
            "$emit": [Function],
            "$listeners": Object {
              "click": [Function],
            },
            "$options": Object {
              "_componentTag": undefined,
              "_parentElm": null,
              "_parentListeners": Object {
                "click": [Function],
              },
              "_parentVnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": [Circular],
                "componentOptions": Object {
                  "Ctor": [Function],
                  "children": undefined,
                  "listeners": Object {
                    "click": [Function],
                  },
                  "propsData": Object {
                    "buttons": Array [],
                  },
                  "tag": undefined,
                },
                "context": [Circular],
                "data": Object {
                  "hook": Object {
                    "destroy": [Function],
                    "init": [Function],
                    "insert": [Function],
                    "prepatch": [Function],
                  },
                  "on": undefined,
                  "pendingInsert": null,
                  "props": Object {
                    "buttons": Array [],
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": "vue-component-5-TipeTabsMenu",
                "text": undefined,
              },
              "_propKeys": Array [
                "buttons",
              ],
              "_refElm": null,
              "_renderChildren": undefined,
              "parent": [Circular],
              "propsData": Object {
                "buttons": Array [],
              },
            },
            "$parent": [Circular],
            "$refs": Object {},
            "$root": [Circular],
            "$scopedSlots": Object {},
            "$slots": Object {},
            "$vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": undefined,
              "componentInstance": [Circular],
              "componentOptions": Object {
                "Ctor": [Function],
                "children": undefined,
                "listeners": Object {
                  "click": [Function],
                },
                "propsData": Object {
                  "buttons": Array [],
                },
                "tag": undefined,
              },
              "context": [Circular],
              "data": Object {
                "hook": Object {
                  "destroy": [Function],
                  "init": [Function],
                  "insert": [Function],
                  "prepatch": [Function],
                },
                "on": undefined,
                "pendingInsert": null,
                "props": Object {
                  "buttons": Array [],
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": false,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": undefined,
              "raw": false,
              "tag": "vue-component-5-TipeTabsMenu",
              "text": undefined,
            },
            "__emitted": Object {},
            "__emittedByOrder": Array [],
            "_c": [Function],
            "_data": Object {},
            "_directInactive": false,
            "_events": Object {
              "click": Array [
                [Function],
              ],
            },
            "_hasHookEvent": false,
            "_inactive": null,
            "_isBeingDestroyed": false,
            "_isDestroyed": false,
            "_isMounted": true,
            "_isVue": true,
            "_props": Object {
              "buttons": Array [],
            },
            "_renderProxy": VueComponent {
              "$attrs": Object {},
              "$children": Array [],
              "$createElement": [Function],
              "$el": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "$emit": [Function],
              "$listeners": Object {
                "click": [Function],
              },
              "$options": Object {
                "_componentTag": undefined,
                "_parentElm": null,
                "_parentListeners": Object {
                  "click": [Function],
                },
                "_parentVnode": VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": undefined,
                  "componentInstance": [Circular],
                  "componentOptions": Object {
                    "Ctor": [Function],
                    "children": undefined,
                    "listeners": Object {
                      "click": [Function],
                    },
                    "propsData": Object {
                      "buttons": Array [],
                    },
                    "tag": undefined,
                  },
                  "context": [Circular],
                  "data": Object {
                    "hook": Object {
                      "destroy": [Function],
                      "init": [Function],
                      "insert": [Function],
                      "prepatch": [Function],
                    },
                    "on": undefined,
                    "pendingInsert": null,
                    "props": Object {
                      "buttons": Array [],
                    },
                  },
                  "elm": <div
                    data-tipe-ui="TipeTabsMenu"
                  />,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": false,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": undefined,
                  "raw": false,
                  "tag": "vue-component-5-TipeTabsMenu",
                  "text": undefined,
                },
                "_propKeys": Array [
                  "buttons",
                ],
                "_refElm": null,
                "_renderChildren": undefined,
                "parent": [Circular],
                "propsData": Object {
                  "buttons": Array [],
                },
              },
              "$parent": [Circular],
              "$refs": Object {},
              "$root": [Circular],
              "$scopedSlots": Object {},
              "$slots": Object {},
              "$vnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": [Circular],
                "componentOptions": Object {
                  "Ctor": [Function],
                  "children": undefined,
                  "listeners": Object {
                    "click": [Function],
                  },
                  "propsData": Object {
                    "buttons": Array [],
                  },
                  "tag": undefined,
                },
                "context": [Circular],
                "data": Object {
                  "hook": Object {
                    "destroy": [Function],
                    "init": [Function],
                    "insert": [Function],
                    "prepatch": [Function],
                  },
                  "on": undefined,
                  "pendingInsert": null,
                  "props": Object {
                    "buttons": Array [],
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": "vue-component-5-TipeTabsMenu",
                "text": undefined,
              },
              "__emitted": Object {},
              "__emittedByOrder": Array [],
              "_c": [Function],
              "_data": Object {},
              "_directInactive": false,
              "_events": Object {
                "click": Array [
                  [Function],
                ],
              },
              "_hasHookEvent": false,
              "_inactive": null,
              "_isBeingDestroyed": false,
              "_isDestroyed": false,
              "_isMounted": true,
              "_isVue": true,
              "_props": Object {
                "buttons": Array [],
              },
              "_renderProxy": [Circular],
              "_self": [Circular],
              "_staticTrees": null,
              "_uid": 1,
              "_vnode": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": Array [],
                "componentInstance": undefined,
                "componentOptions": undefined,
                "context": [Circular],
                "data": Object {
                  "attrs": Object {
                    "data-tipe-ui": "TipeTabsMenu",
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": true,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": VNode {
                  "asyncFactory": undefined,
                  "asyncMeta": undefined,
                  "children": undefined,
                  "componentInstance": [Circular],
                  "componentOptions": Object {
                    "Ctor": [Function],
                    "children": undefined,
                    "listeners": Object {
                      "click": [Function],
                    },
                    "propsData": Object {
                      "buttons": Array [],
                    },
                    "tag": undefined,
                  },
                  "context": [Circular],
                  "data": Object {
                    "hook": Object {
                      "destroy": [Function],
                      "init": [Function],
                      "insert": [Function],
                      "prepatch": [Function],
                    },
                    "on": undefined,
                    "pendingInsert": null,
                    "props": Object {
                      "buttons": Array [],
                    },
                  },
                  "elm": <div
                    data-tipe-ui="TipeTabsMenu"
                  />,
                  "fnContext": undefined,
                  "fnOptions": undefined,
                  "fnScopeId": undefined,
                  "isAsyncPlaceholder": false,
                  "isCloned": false,
                  "isComment": false,
                  "isOnce": false,
                  "isRootInsert": false,
                  "isStatic": false,
                  "key": undefined,
                  "ns": undefined,
                  "parent": undefined,
                  "raw": false,
                  "tag": "vue-component-5-TipeTabsMenu",
                  "text": undefined,
                },
                "raw": false,
                "tag": "div",
                "text": undefined,
              },
              "_watcher": Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
              "_watchers": Array [
                Watcher {
                  "active": true,
                  "cb": [Function],
                  "deep": false,
                  "depIds": Set {
                    6,
                  },
                  "deps": Array [
                    Dep {
                      "_sortedId": 0,
                      "id": 6,
                      "subs": Array [
                        [Circular],
                      ],
                    },
                  ],
                  "dirty": false,
                  "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                  "getter": [Function],
                  "id": 7,
                  "lazy": false,
                  "newDepIds": Set {},
                  "newDeps": Array [],
                  "sync": true,
                  "user": false,
                  "value": undefined,
                  "vm": [Circular],
                },
              ],
            },
            "_self": [Circular],
            "_staticTrees": null,
            "_uid": 1,
            "_vnode": VNode {
              "asyncFactory": undefined,
              "asyncMeta": undefined,
              "children": Array [],
              "componentInstance": undefined,
              "componentOptions": undefined,
              "context": [Circular],
              "data": Object {
                "attrs": Object {
                  "data-tipe-ui": "TipeTabsMenu",
                },
              },
              "elm": <div
                data-tipe-ui="TipeTabsMenu"
              />,
              "fnContext": undefined,
              "fnOptions": undefined,
              "fnScopeId": undefined,
              "isAsyncPlaceholder": false,
              "isCloned": false,
              "isComment": false,
              "isOnce": false,
              "isRootInsert": true,
              "isStatic": false,
              "key": undefined,
              "ns": undefined,
              "parent": VNode {
                "asyncFactory": undefined,
                "asyncMeta": undefined,
                "children": undefined,
                "componentInstance": [Circular],
                "componentOptions": Object {
                  "Ctor": [Function],
                  "children": undefined,
                  "listeners": Object {
                    "click": [Function],
                  },
                  "propsData": Object {
                    "buttons": Array [],
                  },
                  "tag": undefined,
                },
                "context": [Circular],
                "data": Object {
                  "hook": Object {
                    "destroy": [Function],
                    "init": [Function],
                    "insert": [Function],
                    "prepatch": [Function],
                  },
                  "on": undefined,
                  "pendingInsert": null,
                  "props": Object {
                    "buttons": Array [],
                  },
                },
                "elm": <div
                  data-tipe-ui="TipeTabsMenu"
                />,
                "fnContext": undefined,
                "fnOptions": undefined,
                "fnScopeId": undefined,
                "isAsyncPlaceholder": false,
                "isCloned": false,
                "isComment": false,
                "isOnce": false,
                "isRootInsert": false,
                "isStatic": false,
                "key": undefined,
                "ns": undefined,
                "parent": undefined,
                "raw": false,
                "tag": "vue-component-5-TipeTabsMenu",
                "text": undefined,
              },
              "raw": false,
              "tag": "div",
              "text": undefined,
            },
            "_watcher": Watcher {
              "active": true,
              "cb": [Function],
              "deep": false,
              "depIds": Set {
                6,
              },
              "deps": Array [
                Dep {
                  "_sortedId": 0,
                  "id": 6,
                  "subs": Array [
                    [Circular],
                  ],
                },
              ],
              "dirty": false,
              "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
              "getter": [Function],
              "id": 7,
              "lazy": false,
              "newDepIds": Set {},
              "newDeps": Array [],
              "sync": true,
              "user": false,
              "value": undefined,
              "vm": [Circular],
            },
            "_watchers": Array [
              Watcher {
                "active": true,
                "cb": [Function],
                "deep": false,
                "depIds": Set {
                  6,
                },
                "deps": Array [
                  Dep {
                    "_sortedId": 0,
                    "id": 6,
                    "subs": Array [
                      [Circular],
                    ],
                  },
                ],
                "dirty": false,
                "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
                "getter": [Function],
                "id": 7,
                "lazy": false,
                "newDepIds": Set {},
                "newDeps": Array [],
                "sync": true,
                "user": false,
                "value": undefined,
                "vm": [Circular],
              },
            ],
          },
        ],
        "$createElement": [Function],
        "$el": <div
          data-tipe-ui="TipeTabs"
          style="height: 100%; width: 100%;"
        >
          <div
            data-tipe-ui="TipeTabsMenu"
          />
        </div>,
        "$emit": [Function],
        "$listeners": Object {},
        "$options": Object {
          "_Ctor": Object {
            "1": [Function],
          },
          "_base": [Function],
          "_parentElm": null,
          "_refElm": null,
          "beforeCreate": Array [
            [Function],
          ],
          "components": Object {
            "TipeTabsMenu": Object {
              "attrs": undefined,
              "class": undefined,
              "domProps": undefined,
              "functional": undefined,
              "key": undefined,
              "name": "TipeTabsMenu",
              "nativeOn": undefined,
              "normalizedStyle": undefined,
              "on": undefined,
              "props": Object {
                "buttons": Object {
                  "type": [Function],
                  "validator": [Function],
                },
              },
              "ref": undefined,
              "render": [Function],
              "staticClass": undefined,
              "staticStyle": undefined,
              "style": undefined,
            },
            "transition": Object {
              "_Ctor": Object {
                "1": [Function],
              },
              "name": "transition",
              "render": [Function],
            },
            "transition-group": Object {
              "_Ctor": Object {
                "1": [Function],
              },
              "name": "transition-group",
              "render": [Function],
            },
          },
          "computed": Object {
            "activePanelLabel": [Function],
            "buttons": [Function],
            "panel": [Function],
            "panelVNodes": [Function],
            "panels": [Function],
          },
          "data": [Function],
          "directives": Object {},
          "filters": Object {},
          "logModifiedComponents": true,
          "methods": Object {
            "onClickMenuButton": [Function],
          },
          "name": "TipeTabs",
          "provide": [Function],
          "render": [Function],
        },
        "$parent": undefined,
        "$refs": Object {},
        "$root": [Circular],
        "$scopedSlots": Object {},
        "$slots": Object {},
        "$vnode": undefined,
        "__emitted": Object {},
        "__emittedByOrder": Array [],
        "_c": [Function],
        "_computedWatchers": Object {
          "activePanelLabel": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": true,
            "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
            "getter": [Function],
            "id": 3,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "buttons": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
            "getter": [Function],
            "id": 4,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": Array [],
            "vm": [Circular],
          },
          "panel": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
            "getter": [Function],
            "id": 5,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          "panelVNodes": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
            "getter": [Function],
            "id": 1,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": Array [],
            "vm": [Circular],
          },
          "panels": Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
            "getter": [Function],
            "id": 2,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": Array [],
            "vm": [Circular],
          },
        },
        "_data": Object {
          "internalActivePanelLabel": null,
        },
        "_directInactive": false,
        "_events": Object {},
        "_hasHookEvent": false,
        "_inactive": null,
        "_isBeingDestroyed": false,
        "_isDestroyed": false,
        "_isMounted": true,
        "_isVue": true,
        "_provided": undefined,
        "_renderProxy": [Circular],
        "_self": [Circular],
        "_staticTrees": null,
        "_uid": 0,
        "_vnode": [Circular],
        "_watcher": Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 6,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        "_watchers": Array [
          Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
            "getter": [Function],
            "id": 1,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": Array [],
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
            "getter": [Function],
            "id": 2,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": Array [],
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": true,
            "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
            "getter": [Function],
            "id": 3,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
            "getter": [Function],
            "id": 4,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": Array [],
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
            "getter": [Function],
            "id": 5,
            "lazy": true,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
          Watcher {
            "active": true,
            "cb": [Function],
            "deep": false,
            "depIds": Set {},
            "deps": Array [],
            "dirty": false,
            "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
            "getter": [Function],
            "id": 6,
            "lazy": false,
            "newDepIds": Set {},
            "newDeps": Array [],
            "sync": true,
            "user": false,
            "value": undefined,
            "vm": [Circular],
          },
        ],
        "internalActivePanelLabel": null,
        "onClickMenuButton": [Function],
      },
      "_self": [Circular],
      "_staticTrees": null,
      "_uid": 0,
      "_vnode": [Circular],
      "_watcher": Watcher {
        "active": true,
        "cb": [Function],
        "deep": false,
        "depIds": Set {},
        "deps": Array [],
        "dirty": false,
        "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
        "getter": [Function],
        "id": 6,
        "lazy": false,
        "newDepIds": Set {},
        "newDeps": Array [],
        "sync": true,
        "user": false,
        "value": undefined,
        "vm": [Circular],
      },
      "_watchers": Array [
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panelVNodes() {
      var panels = [];
      if (!this.$slots.default) return panels;

      var hasComponentOptions = function hasComponentOptions(vNode) {
        return vNode.componentOptions !== undefined;
      };

      var isPanel = function isPanel(vNode) {
        return hasComponentOptions(vNode) && vNode.componentOptions.tag === 'tipe-tabs-panel';
      };

      panels = this.$slots.default.filter(isPanel);
      return panels;
    }",
          "getter": [Function],
          "id": 1,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panels() {
      var extractProps = function extractProps(vNode) {
        return {
          icon: vNode.componentOptions.propsData.icon,
          label: vNode.componentOptions.propsData.label,
          active: vNode.componentOptions.propsData.active
        };
      };

      return this.panelVNodes.map(extractProps);
    }",
          "getter": [Function],
          "id": 2,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": true,
          "expression": "function activePanelLabel() {
      var activePanel = this.panels.find(function (panel) {
        return panel.active;
      });

      if (this.internalActivePanelLabel === null) {
        if (activePanel) {
          return activePanel.label;
        } else if (this.panels.length) {
          return this.panels[0].label;
        }
      }

      return this.internalActivePanelLabel;
    }",
          "getter": [Function],
          "id": 3,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function buttons() {
      var _this = this;

      return this.panels.map(function (panel) {
        return (0, _objectSpread2.default)({}, panel, {
          active: _this.activePanelLabel === panel.label
        });
      });
    }",
          "getter": [Function],
          "id": 4,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": Array [],
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function panel() {
      var _this2 = this;

      return this.panelVNodes.find(function (vNode) {
        return vNode.componentOptions.propsData.label === _this2.activePanelLabel;
      });
    }",
          "getter": [Function],
          "id": 5,
          "lazy": true,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
        Watcher {
          "active": true,
          "cb": [Function],
          "deep": false,
          "depIds": Set {},
          "deps": Array [],
          "dirty": false,
          "expression": "function () {
      vm._update(vm._render(), hydrating);
    }",
          "getter": [Function],
          "id": 6,
          "lazy": false,
          "newDepIds": Set {},
          "newDeps": Array [],
          "sync": true,
          "user": false,
          "value": undefined,
          "vm": [Circular],
        },
      ],
      "internalActivePanelLabel": null,
      "onClickMenuButton": [Function],
    },
    "data": Object {
      "attrs": Object {
        "data-tipe-ui": "TipeTabs",
      },
      "normalizedStyle": Object {
        "height": "100%",
        "width": "100%",
      },
      "style": Object {
        "height": "100%",
        "width": "100%",
      },
    },
    "elm": <div
      data-tipe-ui="TipeTabs"
      style="height: 100%; width: 100%;"
    >
      <div
        data-tipe-ui="TipeTabsMenu"
      />
    </div>,
    "fnContext": undefined,
    "fnOptions": undefined,
    "fnScopeId": undefined,
    "isAsyncPlaceholder": false,
    "isCloned": false,
    "isComment": false,
    "isOnce": false,
    "isRootInsert": true,
    "isStatic": false,
    "key": undefined,
    "ns": undefined,
    "parent": undefined,
    "raw": false,
    "tag": "div",
    "text": undefined,
  },
}
`;
